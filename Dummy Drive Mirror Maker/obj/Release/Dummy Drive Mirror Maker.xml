<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dummy Drive Mirror Maker
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:My.Resources.Resources.Abort">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:My.Resources.Resources.Copy">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:My.Resources.Resources.File">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:My.Resources.Resources.Logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:My.Resources.Resources.Main_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a <see cref="T:System.Windows.Forms.MessageBox"/> that will be displayed centered to the 
 specified <see cref="T:System.Windows.Forms.Form"/> or <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using msg As New CenteredMessageBox(owner:=Me,
                                     textFont:=New Font("Lucida Console", Font.SizeInPoints, FontStyle.Italic),
                                     timeOut:=2500)
 
     msg.Show("Text", "Title", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox._TimeoutTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Windows.Forms.Timer"/> that keeps track of <see cref="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeOut"/> value to close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.tries">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the current amount of tries to find this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.DialogWindowHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the messagebox main window handle (hwnd).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The messagebox main window handle (hwnd).
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.dialogWindowHandleB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The messagebox main window handle (hwnd).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Owner">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the owner <see cref="T:System.Windows.Forms.Control"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The owner <see cref="T:System.Windows.Forms.Control"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.ownerB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The owner <see cref="T:System.Windows.Forms.Form"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeOut">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 Default value is '0', which means Infinite.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Form"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Form,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Form"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 
 <param name="timeOut">
 The time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 <para></para>
 Default value is 0, which means Infinite.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Control"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Control,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Control"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 
 <param name="timeOut">
 The time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 <para></para>
 Default value is 0, which means Infinite.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text and caption.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text, caption, and buttons.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text, caption, buttons, and icon.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, and default button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, and options.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="displayHelpButton">
 <see langword="True"/> to show the Help button; otherwise, false. The default is <see langword="False"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file and HelpNavigator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="navigator">
 One of the <see cref="T:System.Windows.Forms.HelpNavigator"/> values.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file and Help keyword.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="keyword">
 The Help keyword to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file, HelpNavigator, and Help topic.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="navigator">
 One of the <see cref="T:System.Windows.Forms.HelpNavigator"/> values.
 </param>
 
 <param name="param">
 The numeric ID of the Help topic to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.FindDialog">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.CheckWindow(System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Checks whether the specified window is our <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to check.
 </param>
 
 <param name="lParam">
 The application-defined value given in the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> the specified window is our <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeoutTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeoutTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and, optionally, managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.IO.Tools.Directories">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains directory related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Directories.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.IO.Tools.Directories"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Directories.GetDirs(System.IO.DirectoryInfo,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirs As List(Of DirectoryInfo) =
     GetDirs("C:\Windows\System32", SearchOption.AllDirectories).ToList
 
 Dim dirs As IEnumerable(Of DirectoryInfo) =
     GetDirs(dirPath:="C:\Windows\System32",
             searchOption:=SearchOption.TopDirectoryOnly,
             dirPathPatterns:={"*"},
             dirNamePatterns:={"*Microsoft*"},
             ignoreCase:=True,
             throwOnError:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dir">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the dirrectories information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Directories.GetDirPaths(System.IO.DirectoryInfo,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim dirPaths As List(Of String) =
     GetDirPaths("C:\Windows\System32", SearchOption.AllDirectories).ToList
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dir">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the directory paths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.IO.Tools.FileDirSearcher"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.GetFiles(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the files information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.GetFilePaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the filepaths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.GetDirs(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the dirrectories information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.GetDirPaths(System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the directory paths.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.AnalyzePath(System.String@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Analyzes a directory path and perform specific changes on it.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="refDirPath">
 The directory path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">dirPath;Value is null, empty, or white-spaced.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.AnalyzeArgs(System.String,System.IO.SearchOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Analyzes the specified directory values.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.SetupDirInfoObject(System.String,System.IO.DirectoryInfo@,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tries to instance the by-reference <see cref="T:System.IO.DirectoryInfo"/> object using the given directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="dirPath">
 The directory path used to instance the by-reference <see cref="T:System.IO.DirectoryInfo"/> object.
 </param>
 
 <param name="refDirInfo">
 The by-reference <see cref="T:System.IO.DirectoryInfo"/> object to instance it using the given directory path.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.SetupFileDirCollection``1(System.Func{System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{``0}},System.Func{System.String,System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{``0}},System.String,System.String,System.Collections.Generic.IEnumerable{``0}@,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Tries to instance the by-reference <paramref name="refCol"/> object using the given directory path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="A">
 The type of the <paramref name="refCol"/> object used to cast and fill the by-reference collection.
 </typeparam>
 
 <param name="objectAction">
 The method to invoke, only for <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/> objects, this parameter can be <see langword="Nothing"/>.
 </param>
 
 <param name="sharedAction">
 The method to invoke, only for filepaths or directorypaths, this parameter can be <see langword="Nothing"/>.
 </param>
 
 <param name="dirPath">
 The directory path used to instance the by-reference <paramref name="refCol"/> object.
 </param>
 
 <param name="searchPattern">
 The search pattern to list files or directories.
 </param>
 
 <param name="refCol">
 The by-reference <see cref="T:System.Collections.Generic.IEnumerable`1"/> object to instance it using the given directory path.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.IsMatchPattern(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether at least one of the specified patterns matches the given value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value, which can be a filename, file extension, direcrory path, or directory name.
 </param>
 
 <param name="patterns">
 The patterns to match the given value.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, compares ignoring string-case rules.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> at least one of the specified patterns matches the given value; <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.RunNextTasks``1(System.Action{System.Collections.Concurrent.ConcurrentQueue{``0},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean},System.Collections.Concurrent.ConcurrentQueue{``0},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Runs the next collector tasks synchronouslly.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T"></typeparam>
 <param name="action">
 The collector method to invoke.
 </param>
 
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance.
 </param>
 
 <param name="dirPath">
 The directory path.
 </param>
 
 <param name="firstPatterns">
 The first comparison patterns.
 </param>
 
 <param name="secondPatterns">
 The second comparison patterns.
 </param>
 
 <param name="ignoreCase">
 If set to <see langword="True"/>, compares ignoring string-case rules.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.CollectFiles(System.Collections.Concurrent.ConcurrentQueue{System.IO.FileInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new files.
 </param>
 
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.CollectFilePaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the filepaths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new filepaths.
 </param>
 
 <param name="dirPath">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.CollectDirs(System.Collections.Concurrent.ConcurrentQueue{System.IO.DirectoryInfo},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the directories those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directories.
 </param>
 
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.FileDirSearcher.CollectDirPaths(System.Collections.Concurrent.ConcurrentQueue{System.String},System.String,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the directory paths those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="queue">
 The <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instance to enqueue new directory paths.
 </param>
 
 <param name="dirPath">
 The root directory path to search for directories.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="dirPathPatterns">
 The directory path pattern(s) to match.
 </param>
 
 <param name="dirNamePatterns">
 The directory name pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="dirPathPatterns"/> and <paramref name="dirNamePatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to directory.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.IO.Tools.Files">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains file related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Files.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.IO.Tools.Files"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Files.GetFiles(System.IO.DirectoryInfo,System.IO.SearchOption,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the files those matches the criteria inside the specified directory and/or sub-directories.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim files As List(Of FileInfo) =
     GetFiles("C:\Windows\System32", SearchOption.AllDirectories).ToList
 
 Dim files As IEnumerable(Of FileInfo) =
     GetFiles(dirPath:="C:\Windows\System32",
              searchOption:=SearchOption.TopDirectoryOnly,
              fileNamePatterns:={"*"},
              fileExtPatterns:={"*.dll", "*.exe"},
              ignoreCase:=True,
              throwOnError:=True)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="dir">
 The root directory path to search for files.
 </param>
 
 <param name="searchOption">
 The searching mode.
 </param>
 
 <param name="fileNamePatterns">
 The file name pattern(s) to match.
 </param>
 
 <param name="fileExtPatterns">
 The file extension pattern(s) to match.
 </param>
 
 <param name="ignoreCase">
 If <see langword="True"/>, ignores the comparing case of <paramref name="fileNamePatterns"/> and <paramref name="fileExtPatterns"/> patterns.
 </param>
 
 <param name="throwOnError">
 If set to <see langword="True"/>, exceptions will be thrown, like access denied to file or directory.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the files information.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentException">dirPath or searchOption
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Files.CreateDummyFile(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a dummy (zero-byte filled) file of zero size.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CreateDummyFile("C:\DummyFile.tmp"))
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The target filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Target file already exists.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Files.CreateDummyFile(System.String,System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a dummy (zero-byte filled) file of the specified filesize.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 CreateDummyFile("C:\DummyFile.tmp", CLng(Math.Pow(1024L, 3L))) ' 1 GB filesize.
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The target filepath.
 </param>
 
 <param name="filesize">
 The filesize, in Bytes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.IO.IOException">
 Target file already exists.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.IO.Tools.Streams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains <see cref="T:System.IO.Stream"/> related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Streams.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.IO.Tools.Streams"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.IO.Tools.Streams.GetFileStreamBufferSize(System.Int64)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Given a filesize, estimates the proper buffer size to boost the performance of a <see cref="T:System.IO.FileStream"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="filesize">
 The size, in bytes, of the data to be read or write by a <see cref="T:System.IO.FileStream"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The returned value is the proper buffer size, in bytes, 
 that should be set as <c>BufferSize</c> parameter when instancing a <see cref="T:System.IO.FileStream"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A extended <see cref="T:System.ComponentModel.BackgroundWorker"/> component 
 with synchronous (blocking) run/cancellation support, 
 and asynchronous pause/resume features.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Friend WithEvents Worker As ElektroBackgroundWorker
 
 Private Sub Button_Run_Click() Handles Button_Run.Click
 
     If (Me.Worker IsNot Nothing) Then
 
         Select Case Me.Worker.State
             Case ElektroBackgroundWorkerState.Running, ElektroBackgroundWorkerState.Paused
                 Me.Worker.Cancel()
             Case Else
                 ' Do Nothing.
         End Select
 
     End If
 
     Me.Worker = New ElektroBackgroundWorker
     Me.Worker.RunAsync()
 
 End Sub
 
 Private Sub Button_Pause_Click() Handles Button_Pause.Click
     Me.Worker.RequestPause()
 End Sub
 
 Private Sub Button_Resume_Click() Handles Button_Resume.Click
     Me.Worker.Resume()
 End Sub
 
 Private Sub Button_Cancel_Click() Handles Button_Cancel.Click
     Me.Worker.Cancel()
 End Sub
 
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Handles the &lt;see cref="ElektroBackgroundWorker.DoWork"/&gt; event of the &lt;see cref="Worker"/&gt; instance.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="sender"&gt;
 ''' The source of the event.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="e"&gt;
 ''' The &lt;see cref="DoWorkEventArgs"/&gt; instance containing the event data.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 &lt;DebuggerStepperBoundary&gt;
 Private Sub Worker_DoWork(ByVal sender As Object, ByVal e As DoWorkEventArgs) _
 Handles Worker.DoWork
 
     Dim progress As Integer
 
     Dim lock As Object = ""
     SyncLock lock
 
         For i As Integer = 0 To 100
             If (Me.Worker.CancellationPending) Then ' Cancel the background operation.
                 e.Cancel = True
                 Exit For
 
             Else
                 If (Me.Worker.PausePending) Then ' Pause the background operation.
                     Me.Worker.Pause() ' Blocking pause call.
                 End If
 
                 Me.DoSomething()
 
                 If Me.Worker.WorkerReportsProgress Then
                     progress = i
                     Me.Worker.ReportProgress(progress)
                 End If
 
             End If
 
         Next i
 
     End SyncLock
 
     If (Me.Worker.WorkerReportsProgress) AndAlso Not (Me.Worker.CancellationPending) AndAlso (progress &lt; 100) Then
         Me.Worker.ReportProgress(percentProgress:=100)
     End If
 
 End Sub
 
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Handles the &lt;see cref="ElektroBackgroundWorker.ProgressChanged"/&gt; event of the &lt;see cref="Worker"/&gt; instance.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="sender"&gt;
 ''' The source of the event.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="e"&gt;
 ''' The &lt;see cref="ProgressChangedEventArgs"/&gt; instance containing the event data.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 &lt;DebuggerStepperBoundary&gt;
 Private Sub Worker_ProgressChanged(ByVal sender As Object, ByVal e As ProgressChangedEventArgs) _
 Handles Worker.ProgressChanged
 
     Console.WriteLine(String.Format("Background Work Progress: {0:00.00}%", e.ProgressPercentage))
 
 End Sub
 
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Handles the &lt;see cref="ElektroBackgroundWorker.RunWorkerCompleted"/&gt; event of the &lt;see cref="Worker"/&gt; instance.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="sender"&gt;
 ''' The source of the event.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="e"&gt;
 ''' The &lt;see cref="RunWorkerCompletedEventArgs"/&gt; instance containing the event data.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 &lt;DebuggerStepperBoundary&gt;
 Private Sub Worker_RunWorkerCompleted(ByVal sender As Object, ByVal e As RunWorkerCompletedEventArgs) _
 Handles Worker.RunWorkerCompleted
 
     If (e.Cancelled) Then
         Debug.WriteLine("Background work cancelled.")
 
     ElseIf (e.Error IsNot Nothing) Then
         Debug.WriteLine("Background work error.")
 
     Else
         Debug.WriteLine("Background work done.")
 
     End If
 
     Console.WriteLine(String.Format("State: {0}", Me.Worker.State.ToString()))
 
 End Sub
 
 &lt;DebuggerStepperBoundary&gt;
 Private Sub DoSomething()
     Thread.Sleep(TimeSpan.FromSeconds(1))
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <seealso cref="T:System.ComponentModel.BackgroundWorker" />
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.mreSync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Threading.ManualResetEvent"/> that serves to handle synchronous operations (Run, Cancel, Pause, Resume).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.mreAsync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Threading.ManualResetEvent"/> that serves to handle asynchronous operations (RunAsync, CancelAsync, RequestPause).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.isRunSync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indicates whether the <see cref="T:System.ComponentModel.BackgroundWorker"/> has been initiated in synchronous mode.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.isCancelSyncRequested">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indicates whether a synchronous cancellation operation is requested.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.isPauseRequested">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Indicates whether a (asynchronous) pause operation is requested.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.WorkerReportsProgress">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> can report progress updates.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if can report progress updates; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.WorkerSupportsCancellation">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> supports asynchronous cancellation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if supports asynchronous cancellation; otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.State">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current state of a pending background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current state of a pending background operation.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.stateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The current state of a pending background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.PausePending">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the application has requested pause of a background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the application has requested pause of a background operation;
 otherwise, false.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Run">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts execution of a background operation.
 <para></para>
 It blocks the caller thread until the background work is done.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to run the BackgroundWorker, the background operation must be stopped or completed.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.RunAsync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously starts execution of a background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to run the BackgroundWorker, the background operation must be stopped or completed.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Pause">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Pause a pending background operation.
 <para></para>
 It blocks the caller thread until the background work is resumed. 
 To resume the background work, call the <see cref="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Resume"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to pause the BackgroundWorker, firstly a pause request should be made.
 </exception>
 
 <exception cref="T:System.InvalidOperationException">
 In order to pause the BackgroundWorker, the background operation must be be running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.RequestPause">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously requests to pause a pending background operation.
 <para></para>
 To pause the background work after requesting a pause, 
 call the <see cref="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Pause"/> method.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to request a pause of the BackgroundWorker, the background operation must be running.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Resume">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Resume a pending paused background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to resume the BackgroundWorker, the background operation must be paused.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Cancel">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Requests cancellation of a pending background operation.
 <para></para>
 It blocks the caller thread until the remaining background work is canceled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to cancel the BackgroundWorker, the background operation must be running or paused.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.CancelAsync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Asynchronously requests cancellation of a pending background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.InvalidOperationException">
 In order to cancel the BackgroundWorker, the background operation must be running or paused.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 An <see cref="T:System.EventArgs"/> that contains the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 An <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> that contains the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 An <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> that contains the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.RunWorkerAsync">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Starts execution of a background operation.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 <para></para>
 Releases unmanaged and, optionally, managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/> to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the state of a <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState.Stopped">
 <summary>
 The <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> is stopped.
 </summary>
</member>
<member name="F:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState.Running">
 <summary>
 The <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> is running.
 </summary>
</member>
<member name="F:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState.Paused">
 <summary>
 The <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> is paused.
 </summary>
</member>
<member name="F:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState.CancellationPending">
 <summary>
 The <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> is pending on a cancellation.
 </summary>
</member>
<member name="F:ElektroKit.Core.Threading.Enums.ElektroBackgroundWorkerState.Completed">
 <summary>
 The <see cref="T:ElektroKit.Core.Threading.Types.ElektroBackgroundWorker"/> is completed (stopped).
 </summary>
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Interop.Win32.Delegates"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An application-defined callback function used with the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function.
 <para></para>
 It receives the window handles associated with a thread.
 <para></para>
 The <c>WNDENUMPROC</c> type defines a pointer to this callback function.
 <para></para>
 <see cref="T:ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc"/> is a placeholder for the application-defined function name. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633496%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to a window associated with the thread specified in the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function. 
 </param>
 
 <param name="lParam">
 The application-defined value given in <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> functions.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 To continue enumeration, the callback function must return <see langword="True"/>; 
 to stop enumeration, it must return <see langword="False"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.LParams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies additional message-specific information for a System-Defined Message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927%28v=vs.85%29.aspx#system_defined"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.LParams.Null">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Null LParam.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The window sizing and positioning flags.
 <para></para>
 Flags combination for <c>uFlags</c> parameter of <see cref="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)"/> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633545%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.None">
 <summary>
 Indicates any flag.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.AsyncWindowPos">
 <summary>
 If the calling thread and the thread that owns the window are attached to different input queues, 
 the system posts the request to the thread that owns the window.
 <para></para>
 This prevents the calling thread from blocking its execution while other threads process the request.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DeferErase">
 <summary>
 Prevents generation of the <c>WM_SYNCPAINT</c> message.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DrawFrame">
 <summary>
 Draws a frame (defined in the window's class description) around the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.FrameChanged">
 <summary>
 Applies new frame styles set using the SetWindowLong function.
 <para></para>
 Sends a <c>WM_NCCALCSIZE</c> message to the window, even if the window's size is not being changed.
 <para></para>
 If this flag is not specified, <c>WM_NCCALCSIZE</c> is sent only when the window's size is being changed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.HideWindow">
 <summary>
 Hides the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontActivate">
 <summary>
 Does not activate the window.
 If this flag is not set, the window is activated and moved to the top of
 either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
 </summary>
 <remarks>SWP_NOACTIVATE</remarks>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontCopyBits">
 <summary>
 Discards the entire contents of the client area.
 <para></para>
 If this flag is not specified, the valid contents of the client area are saved and copied back 
 into the client area after the window is sized or repositioned.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreMove">
 <summary>
 Retains the current position (ignores X and Y parameters).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontChangeOwnerZOrder">
 <summary>
 Does not change the owner window's position in the Z order.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontRedraw">
 <summary>
 Does not redraw changes.
 <para></para>
 If this flag is set, no repainting of any kind occurs.
 <para></para>
 This applies to the client area, the nonclient area (including the title bar and scroll bars), 
 and any part of the parent window uncovered as a result of the window being moved.
 <para></para>
 When this flag is set, the application must explicitly invalidate or redraw any parts of 
 the window and parent window that need redrawing.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontReposition">
 <summary>
 Same as the <see cref="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontChangeOwnerZOrder"/> flag.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontSendChangingEvent">
 <summary>
 Prevents the window from receiving the <c>WM_WINDOWPOSCHANGING</c> message.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreResize">
 <summary>
 Retains the current size (ignores the cx and cy parameters).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreZOrder">
 <summary>
 Retains the current Z order (ignores the <c>hwndInsertAfter</c> parameter).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.ShowWindow">
 <summary>
 Displays the window.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.WindowsMessages">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The system sends or posts a system-defined message when it communicates with an application. 
 <para></para>
 It uses these UIMessages to control the operations of applications and to provide input and other information for applications to process. 
 <para></para>
 An application can also send or post system-defined UIMessages.
 <para></para>
 Applications generally use these UIMessages to control the operation of control windows created by using preregistered window classes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null"/> message performs no operation.
 <para></para>
 An application sends the <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null"/> message if it wants to 
 post a message that the recipient window will ignore.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_Paint">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the control needs repainting.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href=""/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_PrintClient">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The message is sent to a window to request that it draw its client area in the specified device context 
 most commonly in a printer device context.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href=""/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_SetFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the font that a control is to use when drawing text.
 <para></para>
 
 <c>wParam</c> 
 A handle to the font (HFONT).
 <para></para>
 If this parameter is <see langword="Nothing"/>, the control uses the default system font to draw text. 
 <para></para>
 
 <c>lParam</c> 
 The low-order word of lParam specifies whether the control should be redrawn immediately upon setting the font. 
 <para></para>
 If this parameter is TRUE, the control redraws itself.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632642%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_SetText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the text of a window.
 <para></para>
 
 <c>wParam</c> 
 This parameter is not used
 <para></para>
 
 <c>lParam</c> 
 A pointer to a null-terminated string that is the window text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632644%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_GetText">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the text that corresponds to a window into a buffer provided by the caller.
 <para></para>
 
 <c>wParam</c> 
 The maximum number of characters to be copied, including the terminating null character.
 <para></para>
 ANSI applications may have the string in the buffer reduced in size 
 (to a minimum of half that of the wParam value) due to conversion from ANSI to Unicode.
 <para></para>
 
 <c>lParam</c> 
 A pointer to the buffer that is to receive the text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632627%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_GetTextLength">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines the length, in characters, of the text associated with a window.
 <para></para>
 
 <c>wParam</c> 
 This parameter is not used and must be zero
 <para></para>
 
 <c>lParam</c> 
 This parameter is not used and must be zero
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632628%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.WindowStylesEx">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Extended window styles.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ff700543%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowStylesEx.Composited">
 <summary>
 Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
 <para></para>
 This cannot be used if the window has a class style of either <c>CS_OWNDC</c> or <c>CS_CLASSDC</c>.
 <para></para>
 With <see cref="F:ElektroKit.Interop.Win32.Enums.WindowStylesEx.Composited"/> set, 
 all descendants of a window get bottom-to-top painting order using double-buffering.
 <para></para>
 Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
 but only if the descendent window also has the WindowStylesEx.Transparent bit set.
 <para></para>
 Double-buffering allows the window and its descendents to be painted without flicker.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The system sends or posts a system-defined message when it communicates with an application. 
 <para></para>
 It uses these UIMessages to control the operations of applications and to provide input and other information for applications to process. 
 <para></para>
 An application can also send or post system-defined UIMessages.
 <para></para>
 Applications generally use these UIMessages to control the operation of control windows created by using preregistered window classes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ff485990(v=vs.85).aspx"/>
 <para></para>
 The definitions can be found in the Windows SDK file: WinUser.h
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.Null">
 <summary>
 The <see cref="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.Null"/> message performs no operation.
 <para></para>
 An application sends the <see cref="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.Null"/> message if it wants to 
 post a message that the recipient window will ignore.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.SetState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of the progress bar.
 <para></para>
 
 <c>wParam</c> 
 State of the progress bar that is being set.
 <para></para>
 
 <c>lParam</c> 
 Must be zero.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb760850(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.WParams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies additional message-specific information for a System-Defined Message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927%28v=vs.85%29.aspx#system_defined"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WParams.Null">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A Null WParam.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WParams.PBST_Normal">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Normal (Green Color).
 <para></para>
 Used with <see cref="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.SetState"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb760850(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WParams.PBST_Error">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Error (Red Color).
 <para></para>
 Used with <see cref="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.SetState"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb760850(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WParams.PBST_Paused">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Paused (Yellow Color).
 <para></para>
 Used with <see cref="F:ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages.SetState"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb760850(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.NativeMethods">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 <para></para>
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/> must not be applied to this class.
 <para></para>
 This class is for methods that can be used anywhere because a stack walk will be performed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/ms182161.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Interop.Win32.NativeMethods"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.DeleteObject(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a logical pen, brush, font, bitmap, region, or palette,
 freeing all system resources associated with the object.
 <para></para>
 After the object is deleted, the specified handle is no longer valid.
 <para></para>
 Do not delete a drawing object (pen or brush) while it is still selected into a DC.
 <para></para>
 When a pattern brush is deleted, the bitmap associated with the brush is not deleted. 
 The bitmap must be deleted independently.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633540%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hObject">
 A handle to a logical pen, brush, font, bitmap, region, or palette.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the specified handle is not valid or is currently selected into a DC, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.DeleteObject(System.Runtime.InteropServices.HandleRef)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a logical pen, brush, font, bitmap, region, or palette,
 freeing all system resources associated with the object.
 <para></para>
 After the object is deleted, the specified handle is no longer valid.
 <para></para>
 Do not delete a drawing object (pen or brush) while it is still selected into a DC.
 <para></para>
 When a pattern brush is deleted, the bitmap associated with the brush is not deleted. 
 The bitmap must be deleted independently.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633540%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hObject">
 A handle to a logical pen, brush, font, bitmap, region, or palette.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the specified handle is not valid or is currently selected into a DC, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetTextMetricsA(System.IntPtr,ElektroKit.Interop.Win32.Types.TextMetricA@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fills the specified buffer with the metrics for the currently selected font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd144941(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle To a DC (Device Context).
 </param>
 
 <param name="refMetrics">
 A pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.TextMetricA"/> structure that receives the text metrics.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetTextMetricsA(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.TextMetricA@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fills the specified buffer with the metrics for the currently selected font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd144941(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle To a DC (Device Context).
 </param>
 
 <param name="refMetrics">
 A pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.TextMetricA"/> structure that receives the text metrics.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetTextMetricsW(System.IntPtr,ElektroKit.Interop.Win32.Types.TextMetricW@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fills the specified buffer with the metrics for the currently selected font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd144941(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle To a DC (Device Context).
 </param>
 
 <param name="refMetrics">
 A pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.TextMetricW"/> structure that receives the text metrics.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetTextMetricsW(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.TextMetricW@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fills the specified buffer with the metrics for the currently selected font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd144941(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle To a DC (Device Context).
 </param>
 
 <param name="refMetrics">
 A pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.TextMetricW"/> structure that receives the text metrics.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects an object into a specified device context.
 <para></para>
 The new object replaces the previous object of the same type. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162957%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the <c>DC</c>.
 </param>
 
 <param name="hObject">
 A handle to the object to be selected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the selected object is not a region and the function succeeds, 
 the return value is a handle to the object being replaced.
 <para></para>
 If the selected object is a region and the function succeeds, 
 the return value is one of the following values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SelectObject(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Selects an object into a specified device context.
 <para></para>
 The new object replaces the previous object of the same type. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162957%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 A handle to the <c>DC</c>.
 </param>
 
 <param name="hObject">
 A handle to the object to be selected.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the selected object is not a region and the function succeeds, 
 the return value is a handle to the object being replaced.
 <para></para>
 If the selected object is a region and the function succeeds, 
 the return value is one of the following values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetCurrentThreadId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the thread identifier of the calling thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683183%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The thread identifier of the calling thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the name of the class to which the specified window belongs.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633582(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="className">
 The class name string. 
 </param>
 
 <param name="maxCount">
 The length of the <paramref name="className"/> buffer, in characters. 
 <para></para>
 The buffer must be large enough to include the terminating null character; 
 otherwise, the class name string is truncated to <paramref name="maxCount"/>-1 characters. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the number of characters copied to the buffer, 
 not including the terminating null character.
 <para></para>
 If the function fails, the return value is <c>0</c>. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Destroys the specified window.
 The function sends WM_Destroy and WM_NcDestroy messages to the window 
 to deactivate it and remove the keyboard focus from it.
 <para></para>
 The function also destroys the window's menu, flushes the thread message queue, destroys timers, 
 removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).
 <para></para>
 If the specified window is a parent or owner window, 
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> automatically destroys the associated child or owned windows when 
 it destroys the parent or owner window.
 <para></para>
 The function first destroys child or owned windows, and then it destroys the parent or owner window.
 <para></para>
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> also destroys modeless dialog boxes created by the <c>CreateDialog</c> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632682%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be destroyed. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see cref="F:System.IntPtr.Zero"/>.
 <para></para>
 If the function fails, the return value is equal to a handle to the local memory object.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.Runtime.InteropServices.HandleRef)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Destroys the specified window.
 The function sends WM_Destroy and WM_NcDestroy messages to the window 
 to deactivate it and remove the keyboard focus from it.
 <para></para>
 The function also destroys the window's menu, flushes the thread message queue, destroys timers, 
 removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).
 <para></para>
 If the specified window is a parent or owner window, 
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> automatically destroys the associated child or owned windows when 
 it destroys the parent or owner window.
 <para></para>
 The function first destroys child or owned windows, and then it destroys the parent or owner window.
 <para></para>
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> also destroys modeless dialog boxes created by the <c>CreateDialog</c> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632682%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be destroyed. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see cref="F:System.IntPtr.Zero"/>.
 <para></para>
 If the function fails, the return value is equal to a handle to the local memory object.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the size, position, and Z order of a child, pop-up, or top-level window.
 <para></para>
 These windows are ordered according to their appearance on the screen.
 <para></para>
 The topmost window receives the highest rank and is the first window in the Z order.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633545(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="hwndInsertAfter">
 A handle to the window to precede the positioned window in the Z order.
 </param>
 
 <param name="x">
 The new position of the left side of the window, in client coordinates.
 </param>
 
 <param name="y">
 The new position of the top of the window, in client coordinates.
 </param>
 
 <param name="cx">
 The new width of the window, in pixels.
 </param>
 
 <param name="cy">
 The new height of the window, in pixels.
 </param>
 
 <param name="uFlags">
 The window sizing and positioning flags.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.Runtime.InteropServices.HandleRef,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the size, position, and Z order of a child, pop-up, or top-level window.
 <para></para>
 These windows are ordered according to their appearance on the screen.
 <para></para>
 The topmost window receives the highest rank and is the first window in the Z order.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633545(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="hwndInsertAfter">
 A handle to the window to precede the positioned window in the Z order.
 </param>
 
 <param name="x">
 The new position of the left side of the window, in client coordinates.
 </param>
 
 <param name="y">
 The new position of the top of the window, in client coordinates.
 </param>
 
 <param name="cx">
 The new width of the window, in pixels.
 </param>
 
 <param name="cy">
 The new height of the window, in pixels.
 </param>
 
 <param name="uFlags">
 The window sizing and positioning flags.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetWindowRect(System.IntPtr,ElektroKit.Interop.Win32.Types.NativeRectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetWindowRect(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.NativeRectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetWindowRect(System.Runtime.InteropServices.HandleRef,System.Drawing.Rectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetClassName(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the name of the class to which the specified window belongs.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633582(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="className">
 The class name string. 
 </param>
 
 <param name="maxCount">
 The length of the <paramref name="className"/> buffer, in characters. 
 <para></para>
 The buffer must be large enough to include the terminating null character; 
 otherwise, the class name string is truncated to <paramref name="maxCount"/>-1 characters. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the number of characters copied to the buffer, 
 not including the terminating null character.
 <para></para>
 If the function fails, the return value is <c>0</c>. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves a handle to a control in the specified dialog box.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms645481%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the dialog box that contains the control
 .</param>
 
 <param name="index">
 The index of the item to be retrieved.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the window handle of the specified control.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating an invalid dialog box handle or a nonexistent control.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetDlgItem(System.Runtime.InteropServices.HandleRef,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves a handle to a control in the specified dialog box.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms645481%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the dialog box that contains the control
 .</param>
 
 <param name="index">
 The index of the item to be retrieved.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the window handle of the specified control.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating an invalid dialog box handle or a nonexistent control.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prepares the specified window for painting 
 and fills a <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure with information about the painting.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd183362(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be repainted.
 </param>
 
 <param name="refPaint">
 Pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure that will receive painting information. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the handle to a display device context for the specified window.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating that no display device context is available. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.PaintStruct@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prepares the specified window for painting 
 and fills a <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure with information about the painting.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd183362(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be repainted.
 </param>
 
 <param name="refPaint">
 Pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure that will receive painting information. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the handle to a display device context for the specified window.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating that no display device context is available. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.EndPaint(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.PaintStruct@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Marks the end of painting in the specified window. 
 <para></para>
 This function is required for each call to the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)"/> function, 
 but only after painting is complete.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162598(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window that has been repainted.
 </param>
 
 <param name="refPaint">
 Pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure that contains the 
 painting information retrieved by <see cref="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)"/> function. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the handle to a display device context for the specified window.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating that no display device context is available. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.EndPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Marks the end of painting in the specified window. 
 <para></para>
 This function is required for each call to the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)"/> function, 
 but only after painting is complete.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162598(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window that has been repainted.
 </param>
 
 <param name="refPaint">
 Pointer to the <see cref="T:ElektroKit.Interop.Win32.Types.PaintStruct"/> structure that contains the 
 painting information retrieved by <see cref="M:ElektroKit.Interop.Win32.NativeMethods.BeginPaint(System.IntPtr,ElektroKit.Interop.Win32.Types.PaintStruct@)"/> function. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the handle to a display device context for the specified window.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating that no display device context is available. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enumerates all nonchild windows associated with a thread by passing the handle to each window, 
 in turn, to an application-defined callback function.
 <para></para>
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> continues until the last window is enumerated 
 or the callback function returns <see langword="False"/>.
 <para></para>
 To enumerate child windows of a particular window, use the EnumChildWindows function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633495%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="dwThreadId">
 The identifier of the thread whose windows are to be enumerated.
 </param>
 
 <param name="lpEnumFunc">
 A pointer to an application-defined callback function.
 </param>
 
 <param name="lParam">
 An application-defined value to be passed to the callback function. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the callback function returns <see langword="True"/> for all windows in the thread specified by dwThreadId, 
 the return value is <see langword="True"/>.
 <para></para>
 If the callback function returns <see langword="False"/> on any enumerated window, 
 or if there are no windows found in the thread specified by dwThreadId, 
 the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.IntPtr,ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a <see cref="T:System.Windows.Forms.ProgressBar"/> control.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.IntPtr,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.Text.StringBuilder)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.Text.StringBuilder)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.IntPtr,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Enums.ProgressBarUIMessages,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a <see cref="T:System.Windows.Forms.ProgressBar"/> control.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.IntPtr,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SendMessage(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Enums.WindowsMessages,System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sends the specified message to a window or windows.
 <para></para>
 The SendMessage function calls the window procedure for the specified window
 and does not return until the window procedure has processed the message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window whose window procedure will receive the message.
 </param>
 
 <param name="msg">
 The message to be sent.
 </param>
 
 <param name="wParam">
 Additional message-specific information.
 </param>
 
 <param name="lParam">
 Additional message-specific information.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The return value specifies the result of the message processing; it depends on the message sent.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Types.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the coordinates of the upper-left and lower-right corners of a rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162897%28v=vs.85%29.aspx"/>
 <para></para>
 <see href="http://www.pinvoke.net/default.aspx/Structures/rect.html"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Left">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Top">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Right">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Bottom">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="left">
 The x-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="top">
 The y-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="right">
 The x-coordinate of the lower-right corner of the rectangle.
 </param>
 
 <param name="bottom">
 The y-coordinate of the lower-right corner of the rectangle.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.#ctor(System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.op_Implicit(ElektroKit.Interop.Win32.Types.NativeRectangle)~System.Drawing.Rectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> to <see cref="T:System.Drawing.Rectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Rectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.op_Implicit(System.Drawing.Rectangle)~ElektroKit.Interop.Win32.Types.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Types.PaintStruct">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains information for an application. 
 <para></para>
 This information can be used to paint the client area of a window owned by that application.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162768(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Types.PaintStruct.Hdc">
 <summary>
 A handle To the display DC To be used For painting.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.PaintStruct.Erase">
 <summary>
 Indicates whether the background must be erased. 
 <para></para>
 This value is non-zero if the application should erase the background. 
 <para></para>
 The application is responsible for erasing the background if a window class is created without a background brush. 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.PaintStruct.Rect">
 <summary>
 A <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> structure that specifies the upper left and lower right corners of the 
 rectangle in which the painting is requested, in device units relative to the upper-left corner of the 
 client area.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.PaintStruct.Restore">
 <summary>
 Reserved; used internally by the system.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.PaintStruct.IncUpdate">
 <summary>
 Reserved; used internally by the system.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Types.TextMetricA">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains basic information about a physical font. 
 <para></para>
 All sizes are specified in logical units; that is, they depend on the current mapping mode of the display context.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/dd145132(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Height">
 <summary>
 The height (ascent + descent) of characters.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Ascent">
 <summary>
 The ascent (units above the base line) of characters. 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Descent">
 <summary>
 The descent (units below the base line) of characters
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.InternalLeading">
 <summary>
 The amount of leading (space) inside the bounds set by the tmHeight member.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.ExternalLeading">
 <summary>
 The amount of extra leading (space) that the application adds between rows.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.AveCharWidth">
 <summary>
 The average width of characters in the font (generally defined as the width of the letter x).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.MaxCharWidth">
 <summary>
 The width of the widest character in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Weight">
 <summary>
 The weight of the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Overhang">
 <summary>
 The extra width per string that may be added to some synthesized fonts.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.DigitizedAspectX">
 <summary>
 The horizontal aspect of the device for which the font was designed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.DigitizedAspectY">
 <summary>
 The vertical aspect of the device for which the font was designed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.FirstChar">
 <summary>
 The value of the first character defined in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.LastChar">
 <summary>
 The value of the last character defined in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.DefaultChar">
 <summary>
 The value of the character to be substituted for characters not in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.BreakChar">
 <summary>
 The value of the character that will be used to define word breaks for text justification
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Italic">
 <summary>
 Specifies an italic font if it is nonzero
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.Underlined">
 <summary>
 Specifies an underlined font if it is nonzero
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.StruckOut">
 <summary>
 A strikeout font if it is nonzero.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.PitchAndFamily">
 <summary>
 Specifies information about the pitch, the technology, and the family of a physical font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricA.CharSet">
 <summary>
 The character set of the font.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Types.TextMetricW">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains basic information about a physical font. 
 <para></para>
 All sizes are specified in logical units; that is, they depend on the current mapping mode of the display context.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/dd145132(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Height">
 <summary>
 The height (ascent + descent) of characters.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Ascent">
 <summary>
 The ascent (units above the base line) of characters. 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Descent">
 <summary>
 The descent (units below the base line) of characters
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.InternalLeading">
 <summary>
 The amount of leading (space) inside the bounds set by the tmHeight member.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.ExternalLeading">
 <summary>
 The amount of extra leading (space) that the application adds between rows.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.AveCharWidth">
 <summary>
 The average width of characters in the font (generally defined as the width of the letter x).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.MaxCharWidth">
 <summary>
 The width of the widest character in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Weight">
 <summary>
 The weight of the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Overhang">
 <summary>
 The extra width per string that may be added to some synthesized fonts.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.DigitizedAspectX">
 <summary>
 The horizontal aspect of the device for which the font was designed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.DigitizedAspectY">
 <summary>
 The vertical aspect of the device for which the font was designed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.FirstChar">
 <summary>
 The value of the first character defined in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.LastChar">
 <summary>
 The value of the last character defined in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.DefaultChar">
 <summary>
 The value of the character to be substituted for characters not in the font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.BreakChar">
 <summary>
 The value of the character that will be used to define word breaks for text justification
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Italic">
 <summary>
 Specifies an italic font if it is nonzero
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.Underlined">
 <summary>
 Specifies an underlined font if it is nonzero
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.StruckOut">
 <summary>
 A strikeout font if it is nonzero.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.PitchAndFamily">
 <summary>
 Specifies information about the pitch, the technology, and the family of a physical font.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.TextMetricW.CharSet">
 <summary>
 The character set of the font.
 </summary>
</member>
<member name="T:ElektroKit.UserControls.Controls.ElektroProgressBar">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A extended <see cref="T:System.Windows.Forms.ProgressBar"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.CreateParams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the required creation parameters when the control handle is created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The creation parameters.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.DoubleBuffered">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer 
 to reduce or prevent flicker.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the surface of the control should be drawn using double buffering; 
 otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.PreventFlickering">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the control should avoid unwanted flickering effects.
 <para></para>
 If <see langword="True"/>, this will avoid any flickering effect on the control, however,
 it will also have a negative impact by slowing down the responsiveness of the control about to 30% slower.
 <para></para>
 This negative impact doesn't affect to the performance of the application itself, 
 just to the performance of this control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that indicates whether the control should avoid unwanted flickering effects.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.preventFlickeringB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 A value that indicates whether the control should avoid unwanted flickering effects.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.Value">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the current value of the progress bar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current value of the progress bar.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.DefaultSize">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the default size of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The default size of the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.Percentage">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the current percentage of the progress bar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The current percentage of the progress bar.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.FormatString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the percentage format string that will be displayed on the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Normal"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Normal"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.formatStringB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field)
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Normal"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.FormatStringError">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the percentage format string that will be displayed on the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Error"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Error"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.formatStringErrorB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field)
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Error"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.FormatStringPaused">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the percentage format string that will be displayed on the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Paused"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Paused"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.formatStringPausedB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field)
 The percentage format string that will be displayed in the control 
 when its current state is <see cref="F:ElektroKit.UserControls.Enums.ProgressBarState.Paused"/>.
 <para></para>
 #current=Current Value 
 #total=Maximum Value 
 #%=Current Percentage 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.Font">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:System.Drawing.Font"/> of the text displayed by the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The <see cref="T:System.Drawing.Font"/> of the text displayed by the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.ResetFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the <see cref="P:ElektroKit.UserControls.Controls.ElektroProgressBar.Font"/> property to its default value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/53b8022e(v=vs.110).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.ShouldSerializeFont">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Checks whether the <see cref="P:ElektroKit.UserControls.Controls.ElektroProgressBar.Font"/> property has changed from its default value 
 and write code into the Form only if the property is changed, thus allowing for more efficient code generation.
 <para></para>
 The designer writes code to the form only if <see langword="True"/> is returned.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/53b8022e(v=vs.110).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 Returns <see langword="True"/> if the font has changed; otherwise, returns <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.ForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the color of the text displayed by the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The color of the text displayed by the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.State">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the state (and fill color) of the progress bar.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The state (and fill color) of the progress bar.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.stateB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The state (and fill color) of the progress bar.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.BorderColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the border color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The border color of the control.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.borderColorB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 The border color of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Controls.ElektroProgressBar.ShowBorder">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the border of the control is shown.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the border of the control is shown; otherwise <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Controls.ElektroProgressBar.showBorderB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing Field )
 A value indicating whether the border of the control is shown.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="E:ElektroKit.UserControls.Controls.ElektroProgressBar.ValueChanged">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Occurs when the progress bar value changes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;summary&gt;
 ''' Handles the &lt;see cref="ElektroProgressBar.ValueChanged"/&gt; event of the &lt;see cref="ElektroProgressBar1"/&gt; control.
 ''' &lt;/summary&gt;
 ''' ----------------------------------------------------------------------------------------------------
 ''' &lt;param name="sender"&gt;
 ''' The source of the event.
 ''' &lt;/param&gt;
 ''' 
 ''' &lt;param name="e"&gt;
 ''' The &lt;see cref="ProgressBarValueChangedEventArgs"/&gt; instance containing the event data.
 ''' &lt;/param&gt;
 ''' ----------------------------------------------------------------------------------------------------
 Private Sub ElektroProgressBar1_ValueChanged(sender As Object, e As ProgressBarValueChangedEventArgs) _
 Handles ElektroProgressBar1.ValueChanged
 
     ' Dim pb As ElektroProgressBar = DirectCast(sender, ElektroProgressBar)
     Console.WriteLine(e.NewValue)
     
 End Sub
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.UserControls.Controls.ElektroProgressBar"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.OnValueChanged(ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Raises <see cref="E:ElektroKit.UserControls.Controls.ElektroProgressBar.ValueChanged"/> event.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows UIMessages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.Increment(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Advances the current position of the progress bar by the specified amount.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The amount by which to increment the progress bar's current position.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.PerformStep">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Advances the current position of the progress bar by the amount of the 
 <see cref="P:System.Windows.Forms.ProgressBar.Step"/> property.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a string representation for this <see cref="T:ElektroKit.UserControls.Controls.ElektroProgressBar"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A <see cref="T:System.String" /> that describes this control.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.GetPercentageString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the percentage string that will be drawn inside the progress bar rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The percentage string that will be drawn inside the progress bar rectangle.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.DrawText(System.Drawing.Graphics)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws the text on the progress bar rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="g">
 The graphics surface.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.DrawBorder(System.Drawing.Graphics)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Draws a border on the control surface.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.DoWmPaint(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prepares the <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_Paint"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Controls.ElektroProgressBar.DoWmPrintClient(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prepares the <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_PrintClient"/> message.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
</member>
<member name="T:ElektroKit.UserControls.Enums.ProgressBarState">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies the state of a <see cref="T:System.Windows.Forms.ProgressBar"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Enums.ProgressBarState.Normal">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Normal (Green Color).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Enums.ProgressBarState.Error">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Error (Red Color).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.UserControls.Enums.ProgressBarState.Paused">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the state of a progressbar to Paused (Yellow Color).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides design-time support for the <see cref="T:ElektroKit.UserControls.Controls.ElektroProgressBar"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <seealso cref="T:System.Windows.Forms.Design.ControlDesigner"/>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner.SnapLines">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets a list of <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine"/> objects representing significant alignment points for this control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The snap lines.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner.GetBaseline(System.Windows.Forms.Control,System.Drawing.ContentAlignment)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the baseline.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 
 <param name="alignment">
 The alignment.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting baseline.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.Designers.ElektroProgressBarDesigner.GetTextMetrics(System.Runtime.InteropServices.HandleRef,ElektroKit.Interop.Win32.Types.TextMetricW@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Fills the specified buffer with the metrics for the currently selected font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="hdc">
 The device context handle.
 </param>
 
 <param name="refMetricUnicode">
 A <see cref="T:ElektroKit.Interop.Win32.Types.TextMetricW"/> (Unicode) structure.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exposes the event-data of an event that notifies for value changes of a control. 
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1.NewValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1.#ctor(`0)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.UserControls.Types.EventArgs.ValueChangedEventArgs`1"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exposes the event-data of an event that notifies for value changes of a <see cref="T:System.Windows.Forms.ProgressBar"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs.NewValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The value.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs.#ctor(System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.UserControls.Types.EventArgs.ProgressBarValueChangedEventArgs"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="value">
 The value.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.UserControls.Types.IBufferedControl">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides simple double buffering (anti flickering) functionality for a Windows Forms <see cref="T:System.Windows.Forms.Control"/>,
 such for example a <see cref="T:System.Windows.Forms.TextBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.IBufferedControl.CreateParams">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the required creation parameters when the control handle is created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The creation parameters.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.IBufferedControl.DoubleBuffered">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer 
 to reduce or prevent flicker.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the surface of the control should be drawn using double buffering; 
 otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.UserControls.Types.IBufferedControl.PreventFlickering">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value that indicates whether the control should avoid unwanted flickering effects.
 <para></para>
 If <see langword="True"/>, this will avoid any flickering effect on the control, however,
 it will also have a negative impact by slowing down the responsiveness of the control about to 30% slower.
 <para></para>
 This negative impact doesn't affect to the performance of the application itself, 
 just to the performance of this control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 A value that indicates whether the control should avoid unwanted flickering effects.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:Main">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The main application Form.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Main.currentFilePath">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the current source filepath to be mirrored.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Main.isProgressBarInitialValuesSet">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to determine whether the initial values of the progress bar has been set.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:Main.incrementProgressBarValue">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to determine whether the progressbar should be updated.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.Main_Load(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Form.Load"/> event of the <see cref="T:Main"/> Form.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.TextBoxSource_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.DragEnter"/> event of the <see cref="P:Main.TextBoxSource"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.TextBoxSource_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.DragDrop"/> event of the <see cref="P:Main.TextBoxSource"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.TextBoxTarget_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.DragEnter"/> event of the <see cref="P:Main.TextBoxTarget"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.TextBoxTarget_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.DragDrop"/> event of the <see cref="P:Main.TextBoxTarget"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.CheckBoxAttribs_CheckedChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event of the <see cref="P:Main.CheckBoxAttribs"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.CheckBoxDatestamps_CheckedChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event of the <see cref="P:Main.CheckBoxDatestamps"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.CheckBoxHiddenFiles_CheckedChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event of the <see cref="P:Main.CheckBoxHiddenFiles"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.CheckBoxIgnoreSecurityExceptions_CheckedChanged(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event of the <see cref="P:Main.CheckBoxIgnoreSecurityExceptions"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ButtonSource_Click(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Click"/> event of the <see cref="P:Main.ButtonSource"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ButtonTarget_Click(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Click"/> event of the <see cref="P:Main.ButtonTarget"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ButtonMirror_Click(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Click"/> event of the <see cref="P:Main.ButtonMirror"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ElektroBackgroundWorker1_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> event 
 of the <see cref="P:Main.ElektroBackgroundWorker1"/> component.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ElektroBackgroundWorker1_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event 
 of the <see cref="P:Main.ElektroBackgroundWorker1"/> component.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ElektroBackgroundWorker1_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event 
 of the <see cref="P:Main.ElektroBackgroundWorker1"/> component.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.ValidateTargetDirectory">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Validates the source directory (<see cref="P:Options.TargetDir"/>).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:Main.SetPreMirrorValues">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the pre-mirror operation values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:UIMessages">
 <summary>
 Represents the strings displayed in the <see cref="T:System.Windows.Forms.MessageBox"/> of the <see cref="T:Main"/> Form.
 </summary>
</member>
<member name="P:Options.SourceDir">
 <summary>
 Gets or sets the source directory.
 </summary>
</member>
<member name="P:Options.TargetDir">
 <summary>
 Gets or sets the target directory.
 </summary>
</member>
<member name="P:Options.PreserveAttribs">
 <summary>
 Gets or sets a value indicating whether the attributes of file and folders must be preserved when mirroring.
 </summary>
</member>
<member name="P:Options.PreserveTimestamps">
 <summary>
 Gets or sets a value indicating whether the timestamp of file and folders must be preserved when mirroring.
 </summary>
</member>
<member name="P:Options.MirrorHiddenFiles">
 <summary>
 Gets or sets a value indicating whether hidden files and folders must be mirrored.
 </summary>
</member>
<member name="P:Options.IgnoreSecurityExceptions">
 <summary>
 Gets or sets a value indicating whether security access exceptions must be handled when in a mirror operation.
 <para></para>
 If <see langword="True"/>, an exception will be thrown if the user has no permission to read a file or folder,
 and the mirror operation will stop abruptly.
 </summary>
</member>
</members>
</doc>
